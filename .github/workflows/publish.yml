name: 'publish'
on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: use Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Cache OpenCV build (macos only)
        if: matrix.platform == 'macos-latest'
        uses: actions/cache@v2
        with:
          path: opencv
          key: ${{ runner.os }}-opencv-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Build OpenCV from source (macos only)
        if: matrix.platform == 'macos-latest'
        run: |
          pip install numpy
          git clone --depth 1 --branch 4.x https://github.com/opencv/opencv.git
          mkdir -p opencv/build
          cd opencv/build
          cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
          make -j$(nproc)
          sudo make install

      - name: install opencv (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          choco install opencv --params "/InstallationPath:C:\"

      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OpenCV_DIR: ${{ matrix.platform == 'windows-latest' && 'C:\\opencv\\build' }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false